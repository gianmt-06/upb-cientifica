// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: contracts/proto/fileserver.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FilesRoute_Ping_FullMethodName              = "/pb.FilesRoute/Ping"
	FilesRoute_CreateFolder_FullMethodName      = "/pb.FilesRoute/CreateFolder"
	FilesRoute_GetProperties_FullMethodName     = "/pb.FilesRoute/GetProperties"
	FilesRoute_DeleteFile_FullMethodName        = "/pb.FilesRoute/DeleteFile"
	FilesRoute_RenameFile_FullMethodName        = "/pb.FilesRoute/RenameFile"
	FilesRoute_GetFolderFiles_FullMethodName    = "/pb.FilesRoute/GetFolderFiles"
	FilesRoute_GetSharedFiles_FullMethodName    = "/pb.FilesRoute/GetSharedFiles"
	FilesRoute_GetCustomFiles_FullMethodName    = "/pb.FilesRoute/GetCustomFiles"
	FilesRoute_GetHomeSize_FullMethodName       = "/pb.FilesRoute/GetHomeSize"
	FilesRoute_GetAlbumFiles_FullMethodName     = "/pb.FilesRoute/GetAlbumFiles"
	FilesRoute_GetStreamingFiles_FullMethodName = "/pb.FilesRoute/GetStreamingFiles"
	FilesRoute_Upload_FullMethodName            = "/pb.FilesRoute/Upload"
	FilesRoute_Download_FullMethodName          = "/pb.FilesRoute/Download"
	FilesRoute_ChmodFile_FullMethodName         = "/pb.FilesRoute/ChmodFile"
	FilesRoute_MoveFile_FullMethodName          = "/pb.FilesRoute/MoveFile"
)

// FilesRouteClient is the client API for FilesRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesRouteClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResponse, error)
	GetProperties(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	GetFolderFiles(ctx context.Context, in *GetAllFilesRequest, opts ...grpc.CallOption) (*GetAllFilesResponse, error)
	GetSharedFiles(ctx context.Context, in *GetSharedFilesRequest, opts ...grpc.CallOption) (*GetSharedFilesResponse, error)
	GetCustomFiles(ctx context.Context, in *GetCustomFilesRequest, opts ...grpc.CallOption) (*GetCustomFilesResponse, error)
	GetHomeSize(ctx context.Context, in *GetHomeSizeRequest, opts ...grpc.CallOption) (*GetHomeSizeResponse, error)
	GetAlbumFiles(ctx context.Context, in *GetAllImagesRequest, opts ...grpc.CallOption) (*GetAllImagesResponse, error)
	GetStreamingFiles(ctx context.Context, in *GetAllImagesRequest, opts ...grpc.CallOption) (*GetAllImagesResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse], error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error)
	ChmodFile(ctx context.Context, in *ChangePermissionsRequest, opts ...grpc.CallOption) (*ChangePermissionsResponse, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error)
}

type filesRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesRouteClient(cc grpc.ClientConnInterface) FilesRouteClient {
	return &filesRouteClient{cc}
}

func (c *filesRouteClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, FilesRoute_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFolderResponse)
	err := c.cc.Invoke(ctx, FilesRoute_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetProperties(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FilesRoute_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameFileResponse)
	err := c.cc.Invoke(ctx, FilesRoute_RenameFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetFolderFiles(ctx context.Context, in *GetAllFilesRequest, opts ...grpc.CallOption) (*GetAllFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllFilesResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetFolderFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetSharedFiles(ctx context.Context, in *GetSharedFilesRequest, opts ...grpc.CallOption) (*GetSharedFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSharedFilesResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetSharedFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetCustomFiles(ctx context.Context, in *GetCustomFilesRequest, opts ...grpc.CallOption) (*GetCustomFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomFilesResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetCustomFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetHomeSize(ctx context.Context, in *GetHomeSizeRequest, opts ...grpc.CallOption) (*GetHomeSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHomeSizeResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetHomeSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetAlbumFiles(ctx context.Context, in *GetAllImagesRequest, opts ...grpc.CallOption) (*GetAllImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllImagesResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetAlbumFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) GetStreamingFiles(ctx context.Context, in *GetAllImagesRequest, opts ...grpc.CallOption) (*GetAllImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllImagesResponse)
	err := c.cc.Invoke(ctx, FilesRoute_GetStreamingFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilesRoute_ServiceDesc.Streams[0], FilesRoute_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileUploadRequest, FileUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesRoute_UploadClient = grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse]

func (c *filesRouteClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilesRoute_ServiceDesc.Streams[1], FilesRoute_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, DownloadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesRoute_DownloadClient = grpc.ServerStreamingClient[DownloadResponse]

func (c *filesRouteClient) ChmodFile(ctx context.Context, in *ChangePermissionsRequest, opts ...grpc.CallOption) (*ChangePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePermissionsResponse)
	err := c.cc.Invoke(ctx, FilesRoute_ChmodFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesRouteClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveFileResponse)
	err := c.cc.Invoke(ctx, FilesRoute_MoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesRouteServer is the server API for FilesRoute service.
// All implementations must embed UnimplementedFilesRouteServer
// for forward compatibility.
type FilesRouteServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResponse, error)
	GetProperties(context.Context, *GetFileRequest) (*GetFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	GetFolderFiles(context.Context, *GetAllFilesRequest) (*GetAllFilesResponse, error)
	GetSharedFiles(context.Context, *GetSharedFilesRequest) (*GetSharedFilesResponse, error)
	GetCustomFiles(context.Context, *GetCustomFilesRequest) (*GetCustomFilesResponse, error)
	GetHomeSize(context.Context, *GetHomeSizeRequest) (*GetHomeSizeResponse, error)
	GetAlbumFiles(context.Context, *GetAllImagesRequest) (*GetAllImagesResponse, error)
	GetStreamingFiles(context.Context, *GetAllImagesRequest) (*GetAllImagesResponse, error)
	Upload(grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]) error
	Download(*DownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error
	ChmodFile(context.Context, *ChangePermissionsRequest) (*ChangePermissionsResponse, error)
	MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error)
	mustEmbedUnimplementedFilesRouteServer()
}

// UnimplementedFilesRouteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesRouteServer struct{}

func (UnimplementedFilesRouteServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFilesRouteServer) CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFilesRouteServer) GetProperties(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedFilesRouteServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFilesRouteServer) RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedFilesRouteServer) GetFolderFiles(context.Context, *GetAllFilesRequest) (*GetAllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderFiles not implemented")
}
func (UnimplementedFilesRouteServer) GetSharedFiles(context.Context, *GetSharedFilesRequest) (*GetSharedFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedFiles not implemented")
}
func (UnimplementedFilesRouteServer) GetCustomFiles(context.Context, *GetCustomFilesRequest) (*GetCustomFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomFiles not implemented")
}
func (UnimplementedFilesRouteServer) GetHomeSize(context.Context, *GetHomeSizeRequest) (*GetHomeSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeSize not implemented")
}
func (UnimplementedFilesRouteServer) GetAlbumFiles(context.Context, *GetAllImagesRequest) (*GetAllImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumFiles not implemented")
}
func (UnimplementedFilesRouteServer) GetStreamingFiles(context.Context, *GetAllImagesRequest) (*GetAllImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamingFiles not implemented")
}
func (UnimplementedFilesRouteServer) Upload(grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFilesRouteServer) Download(*DownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFilesRouteServer) ChmodFile(context.Context, *ChangePermissionsRequest) (*ChangePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChmodFile not implemented")
}
func (UnimplementedFilesRouteServer) MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFilesRouteServer) mustEmbedUnimplementedFilesRouteServer() {}
func (UnimplementedFilesRouteServer) testEmbeddedByValue()                    {}

// UnsafeFilesRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesRouteServer will
// result in compilation errors.
type UnsafeFilesRouteServer interface {
	mustEmbedUnimplementedFilesRouteServer()
}

func RegisterFilesRouteServer(s grpc.ServiceRegistrar, srv FilesRouteServer) {
	// If the following call pancis, it indicates UnimplementedFilesRouteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FilesRoute_ServiceDesc, srv)
}

func _FilesRoute_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetProperties(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_RenameFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetFolderFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetFolderFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetFolderFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetFolderFiles(ctx, req.(*GetAllFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetSharedFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharedFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetSharedFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetSharedFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetSharedFiles(ctx, req.(*GetSharedFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetCustomFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetCustomFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetCustomFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetCustomFiles(ctx, req.(*GetCustomFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetHomeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetHomeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetHomeSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetHomeSize(ctx, req.(*GetHomeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetAlbumFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetAlbumFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetAlbumFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetAlbumFiles(ctx, req.(*GetAllImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_GetStreamingFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).GetStreamingFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_GetStreamingFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).GetStreamingFiles(ctx, req.(*GetAllImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesRouteServer).Upload(&grpc.GenericServerStream[FileUploadRequest, FileUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesRoute_UploadServer = grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]

func _FilesRoute_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesRouteServer).Download(m, &grpc.GenericServerStream[DownloadRequest, DownloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesRoute_DownloadServer = grpc.ServerStreamingServer[DownloadResponse]

func _FilesRoute_ChmodFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).ChmodFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_ChmodFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).ChmodFile(ctx, req.(*ChangePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesRoute_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesRouteServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesRoute_MoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesRouteServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesRoute_ServiceDesc is the grpc.ServiceDesc for FilesRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FilesRoute",
	HandlerType: (*FilesRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FilesRoute_Ping_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _FilesRoute_CreateFolder_Handler,
		},
		{
			MethodName: "GetProperties",
			Handler:    _FilesRoute_GetProperties_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FilesRoute_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _FilesRoute_RenameFile_Handler,
		},
		{
			MethodName: "GetFolderFiles",
			Handler:    _FilesRoute_GetFolderFiles_Handler,
		},
		{
			MethodName: "GetSharedFiles",
			Handler:    _FilesRoute_GetSharedFiles_Handler,
		},
		{
			MethodName: "GetCustomFiles",
			Handler:    _FilesRoute_GetCustomFiles_Handler,
		},
		{
			MethodName: "GetHomeSize",
			Handler:    _FilesRoute_GetHomeSize_Handler,
		},
		{
			MethodName: "GetAlbumFiles",
			Handler:    _FilesRoute_GetAlbumFiles_Handler,
		},
		{
			MethodName: "GetStreamingFiles",
			Handler:    _FilesRoute_GetStreamingFiles_Handler,
		},
		{
			MethodName: "ChmodFile",
			Handler:    _FilesRoute_ChmodFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _FilesRoute_MoveFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FilesRoute_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _FilesRoute_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contracts/proto/fileserver.proto",
}
